#!/bin/bash

# Usage: ./enhanced_symbolicate_with_threads.sh <app_binary> <load_address> <crash_log> <output_file>
# Example: ./enhanced_symbolicate_with_threads.sh MyApp 0x100000000 crash_log.txt symbolicated_output.txt

if [ "$#" -ne 4 ]; then
    echo "Usage: $0 <app_binary> <load_address> <crash_log> <output_file>"
    exit 1
fi

APP_BINARY=$1
LOAD_ADDRESS=$2
CRASH_LOG=$3
OUTPUT_FILE=$4

# Clear the output file if it exists
> "$OUTPUT_FILE"

# Function to symbolicate a single address using atos
symbolicate_address() {
    local address=$1
    atos -arch arm64 -o "$APP_BINARY" -l "$LOAD_ADDRESS" "$address"
}

# Variable to keep track of the current thread
current_thread=""

# Read the crash log line by line
while IFS= read -r line; do
    # Check if the line contains thread information (e.g., Thread 0, Thread 1, etc.)
    if echo "$line" | grep -qE '^Thread [0-9]+'; then
        # If it's a new thread, capture the thread information
        current_thread=$(echo "$line" | grep -oE '^Thread [0-9]+.*')
        echo "$current_thread" >> "$OUTPUT_FILE"
    elif echo "$line" | grep -qE '0x[0-9a-f]+'; then
        # If the line contains a memory address, symbolicate it
        address=$(echo "$line" | grep -oE '0x[0-9a-f]+')

        # Symbolicate the address
        symbol=$(symbolicate_address "$address")

        # Format the symbolicated output with the file and line number
        symbolicated_line=$(echo "$line" | sed "s/$address/$symbol/g")

        # Append the symbolicated line to the output file under the current thread
        echo "    $symbolicated_line" >> "$OUTPUT_FILE"
    else
        # If it's neither a thread header nor an address, copy the line as-is
        echo "$line" >> "$OUTPUT_FILE"
    fi
done < "$CRASH_LOG"

echo "Symbolicated crash log saved to '$OUTPUT_FILE'"
